// Generated by Apple Swift version 3.1 (swiftlang-802.0.53 clang-802.0.42)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if defined(__has_attribute) && __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import Foundation;
@import CoreGraphics;
@import CoreLocation;
@import Darwin;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"

SWIFT_PROTOCOL_NAMED("SnapshotOptionsProtocol")
@protocol MBSnapshotOptionsProtocol <NSObject>
@property (nonatomic, readonly, copy) NSString * _Nonnull path;
@property (nonatomic, readonly, copy) NSArray<NSURLQueryItem *> * _Nonnull params;
@end

@protocol MBOverlay;
enum MBSnapshotFormat : NSInteger;

/// A structure that determines what a snapshot depicts and how it is formatted. A classic snapshot is made by compositing one or more <a href="https://www.mapbox.com/help/define-tileset/">tile sets</a> with optional overlays using the <a href="https://www.mapbox.com/api-documentation/?language=Swift#static-classic">classic Mapbox Static API</a>.
/// Typically, you use a <code>ClassicSnapshotOptions</code> object to generate a snapshot of a <a href="https://www.mapbox.com/help/define-tileset/#raster-tilesets">raster tile set</a>. If you use <code>ClassicSnapshotOptions</code> to display a <a href="https://www.mapbox.com/help/define-tileset/#vector-tilesets">vector tile set</a>, the snapshot image will depict a wireframe representation of the tile set. To generate a static, styled image of a vector tile set, use a <code>SnapshotOptions</code> object.
SWIFT_CLASS_NAMED("ClassicSnapshotOptions")
@interface MBClassicSnapshotOptions : NSObject <MBSnapshotOptionsProtocol>
/// An array of <a href="https://www.mapbox.com/help/define-map-id/">map identifiers</a> of the form <code>username.id</code>, identifying the <a href="https://www.mapbox.com/help/define-tileset/">tile sets</a> to display in the snapshot. This array may not be empty.
/// The order of the map identifiers in the array reflects their visible order in the snapshot, with the tile set identified at index 0 being the backmost tile set.
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull mapIdentifiers;
/// An array of overlays to draw atop the map.
/// The order in which the overlays are drawn on the map is undefined.
@property (nonatomic, copy) NSArray<id <MBOverlay>> * _Nonnull overlays;
/// The format of the image to output.
/// The default value of this property is <code>SnapshotOptions.Format.png</code>, causing the image to be output in true-color Portable Network Graphics format.
@property (nonatomic) enum MBSnapshotFormat format;
/// The logical size of the image to output, measured in points.
@property (nonatomic) CGSize size;
/// The scale factor of the image.
/// If you multiply the logical size of the image (stored in the <code>size</code> property) by the value in this property, you get the dimensions of the image in pixels.
/// The default value of this property matches the natural scale factor associated with the main screen. However, only images with a scale factor of 1.0 or 2.0 are ever returned by the classic Static API, so a scale factor of 1.0 of less results in a 1× (standard-resolution) image, while a scale factor greater than 1.0 results in a 2× (high-resolution or Retina) image.
@property (nonatomic) CGFloat scale;
/// Initializes a snapshot options instance that causes a snapshotter object to automatically choose a center coordinate and zoom level that fits any overlays.
/// After initializing a snapshot options instance with this initializer, set the <code>overlays</code> property to specify the overlays to fit the snapshot to.
/// \param mapIdentifiers An array of <a href="https://www.mapbox.com/help/define-map-id/">map identifiers</a> of the form <code>username.id</code>, identifying the <a href="https://www.mapbox.com/help/define-tileset/">tile sets</a> to display in the snapshot. This array may not be empty.
///
/// \param size The logical size of the image to output, measured in points.
///
- (nonnull instancetype)initWithMapIdentifiers:(NSArray<NSString *> * _Nonnull)mapIdentifiers size:(CGSize)size OBJC_DESIGNATED_INITIALIZER;
/// Initializes a snapshot options instance that results in a snapshot centered at the given geographical coordinate and showing the given zoom level.
/// \param mapIdentifiers An array of <a href="https://www.mapbox.com/help/define-map-id/">map identifiers</a> of the form <code>username.id</code>, identifying the <a href="https://www.mapbox.com/help/define-tileset/">tile sets</a> to display in the snapshot. This array may not be empty.
///
/// \param centerCoordinate The geographic coordinate at the center of the snapshot.
///
/// \param zoomLevel The zoom level of the snapshot.
///
/// \param size The logical size of the image to output, measured in points.
///
- (nonnull instancetype)initWithMapIdentifiers:(NSArray<NSString *> * _Nonnull)mapIdentifiers centerCoordinate:(CLLocationCoordinate2D)centerCoordinate zoomLevel:(NSInteger)zoomLevel size:(CGSize)size OBJC_DESIGNATED_INITIALIZER;
/// The path of the HTTP request URL corresponding to the options in this instance.
///
/// returns:
/// An HTTP URL path.
@property (nonatomic, readonly, copy) NSString * _Nonnull path;
/// The query component of the HTTP request URL corresponding to the options in this instance.
///
/// returns:
/// The query URL component as an array of name/value pairs.
@property (nonatomic, readonly, copy) NSArray<NSURLQueryItem *> * _Nonnull params;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

/// An image format supported by the classic Static API.
typedef SWIFT_ENUM_NAMED(NSInteger, MBSnapshotFormat, "Format") {
/// True-color Portable Network Graphics format.
  MBSnapshotFormatPng = 0,
/// 32-color color-indexed Portable Network Graphics format.
  MBSnapshotFormatPng32 = 1,
/// 64-color color-indexed Portable Network Graphics format.
  MBSnapshotFormatPng64 = 2,
/// 128-color color-indexed Portable Network Graphics format.
  MBSnapshotFormatPng128 = 3,
/// 256-color color-indexed Portable Network Graphics format.
  MBSnapshotFormatPng256 = 4,
/// JPEG format at default quality.
  MBSnapshotFormatJpeg = 5,
/// JPEG format at 70% quality.
  MBSnapshotFormatJpeg70 = 6,
/// JPEG format at 80% quality.
  MBSnapshotFormatJpeg80 = 7,
/// JPEG format at 90% quality.
  MBSnapshotFormatJpeg90 = 8,
};


/// A feature that can be drawn atop the map.
SWIFT_PROTOCOL_NAMED("Overlay")
@protocol MBOverlay <NSObject>
@end


/// A custom, online image placed at a specific point on the map.
/// The marker image is always centered on the specified location. When creating an asymmetric marker like a pin, make sure that the tip of the pin is at the center of the image.
SWIFT_CLASS_NAMED("CustomMarker")
@interface MBCustomMarker : NSObject <MBOverlay>
/// The geographic coordinate to place the marker at.
@property (nonatomic) CLLocationCoordinate2D coordinate;
/// The HTTP or HTTPS URL of the image.
/// The API caches custom marker images according to the <code>Expires</code> and <code>Cache-Control</code> headers. If you host the image on your own server, make sure that at least one of these headers is set to an proper value to prevent repeated requests for the image.
@property (nonatomic, copy) NSURL * _Nonnull url;
/// Initializes a marker with the given coordinate and image URL.
/// \param coordinate The geographic coordinate to place the marker at.
///
/// \param url The HTTP or HTTPS URL of the image.
///
- (nonnull instancetype)initWithCoordinate:(CLLocationCoordinate2D)coordinate url:(NSURL * _Nonnull)url OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// A geographic object in <a href="https://www.mapbox.com/help/define-geojson/">GeoJSON</a> format.
/// GeoJSON features may be styled according to the <a href="https://github.com/mapbox/simplestyle-spec">simplestyle specification</a>.
SWIFT_CLASS_NAMED("GeoJSON")
@interface MBGeoJSON : NSObject <MBOverlay>
/// String representation of the GeoJSON object to display.
@property (nonatomic, copy) NSString * _Nonnull objectString;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Initializes a <a href="https://www.mapbox.com/help/define-geojson/">GeoJSON</a> overlay with the given GeoJSON object.
/// \param object A valid GeoJSON object.
///
///
/// returns:
/// A GeoJSON overlay, or <code>nil</code> if the given object is not a valid JSON object. This initializer does not check whether the object is valid GeoJSON, but invalid GeoJSON will cause the request to fail.
- (nullable instancetype)initWithObject:(NSDictionary<NSString *, id> * _Nonnull)object error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// Initializes a <a href="https://www.mapbox.com/help/define-geojson/">GeoJSON</a> overlay with the given string representation of a GeoJSON object.
/// This initializer does not check whether the object is valid JSON or GeoJSON, but invalid JSON or GeoJSON will cause the request to fail. To perform basic JSON validation (but not GeoJSON validation), use the <code>init(object:)</code> initializer.
/// \param objectString The string representation of a valid GeoJSON object.
///
- (nonnull instancetype)initWithObjectString:(NSString * _Nonnull)objectString OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface NSHTTPURLResponse (SWIFT_EXTENSION(MapboxStatic))
@end


/// A feature centered over a specific geographic coordinate.
SWIFT_PROTOCOL_NAMED("Point")
@protocol MBPoint <MBOverlay>
/// The geographic coordinate to place the point at.
@property (nonatomic, readonly) CLLocationCoordinate2D coordinate;
@end

enum MBMarkerSize : NSInteger;
@class UIColor;

/// A pin-shaped marker image.
SWIFT_CLASS_NAMED("MarkerImage")
@interface MBMarkerImage : NSObject
/// The size of the marker.
/// By default, the marker is small.
@property (nonatomic) enum MBMarkerSize size;
/// The color of the pin part of the marker.
/// By default, the marker is red.
@property (nonatomic, strong) UIColor * _Nonnull color;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

/// The size of a marker.
typedef SWIFT_ENUM_NAMED(NSInteger, MBMarkerSize, "Size") {
/// A small marker.
/// A small marker in a snapshot is the same size as a medium-sized marker in a classic snapshot.
  MBMarkerSizeSmall = 0,
/// A medium-sized marker.
/// A medium-sized marker in a snapshot is the same size as a large marker in a classic snapshot.
  MBMarkerSizeMedium = 1,
/// A large marker.
  MBMarkerSizeLarge = 2,
};


/// A pin-shaped marker placed at a specific point on the map.
SWIFT_CLASS_NAMED("Marker")
@interface MBMarker : MBMarkerImage <MBPoint>
/// The geographic coordinate to place the marker at.
@property (nonatomic) CLLocationCoordinate2D coordinate;
/// Initializes a red marker labeled with an English letter.
/// \param coordinate The geographic coordinate to place the marker at.
///
/// \param size The size of the marker.
///
/// \param letter An English letter from A through Z to place atop the pin.
///
- (nonnull instancetype)initWithCoordinate:(CLLocationCoordinate2D)coordinate size:(enum MBMarkerSize)size letter:(UniChar)letter;
/// Initializes a red marker labeled with a one- or two-digit number.
/// \param coordinate The geographic coordinate to place the marker at.
///
/// \param size The size of the marker.
///
/// \param number A number from 0 through 99 to place atop the pin.
///
- (nonnull instancetype)initWithCoordinate:(CLLocationCoordinate2D)coordinate size:(enum MBMarkerSize)size number:(NSInteger)number;
/// Initializes a red marker with a <a href="https://www.mapbox.com/maki-icons/">Maki</a> icon.
/// The Maki icon set is <a href="https://github.com/mapbox/maki/">open source</a> and <a href="https://creativecommons.org/publicdomain/zero/1.0/">dedicated to the public domain</a>.
/// The Static API uses Maki v4.0.0. See valid values at the <a href="https://www.mapbox.com/maki-icons/">Maki</a> website. The classic Static API uses Maki v0.5.0. Valid values for classic snapshots are identified by the <code>icon</code> values in <a href="https://github.com/mapbox/maki/blob/v0.5.0/_includes/maki.json">this JSON file</a>.
/// \param coordinate The geographic coordinate to place the marker at.
///
/// \param size The size of the marker.
///
/// \param iconName The name of a <a href="https://www.mapbox.com/maki-icons/">Maki</a> icon to place atop the pin.
///
- (nonnull instancetype)initWithCoordinate:(CLLocationCoordinate2D)coordinate size:(enum MBMarkerSize)size iconName:(NSString * _Nonnull)iconName;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end



/// A structure that configures a standalone marker image and how it is formatted. A standalone marker image is produced by the <a href="https://www.mapbox.com/api-documentation/?language=Swift#static-classic">classic Mapbox Static API</a>.
SWIFT_CLASS_NAMED("MarkerOptions")
@interface MBMarkerOptions : MBMarkerImage <MBSnapshotOptionsProtocol>
/// The scale factor of the image.
/// If you multiply the logical size of the image (stored in the <code>size</code> property) by the value in this property, you get the dimensions of the image in pixels.
/// The default value of this property matches the natural scale factor associated with the main screen. However, only images with a scale factor of 1.0 or 2.0 are ever returned by the classic Static API, so a scale factor of 1.0 of less results in a 1× (standard-resolution) image, while a scale factor greater than 1.0 results in a 2× (high-resolution or Retina) image.
@property (nonatomic) CGFloat scale;
/// Initializes a marker options instance that results in a red marker labeled with an English letter.
/// \param size The size of the marker.
///
/// \param letter An English letter from A through Z to place atop the pin.
///
- (nonnull instancetype)initWithSize:(enum MBMarkerSize)size letter:(UniChar)letter;
/// Initializes a marker options instance that results in a red marker labeled with a one- or two-digit number.
/// \param size The size of the marker.
///
/// \param number A number from 0 through 99 to place atop the pin.
///
- (nonnull instancetype)initWithSize:(enum MBMarkerSize)size number:(NSInteger)number;
/// Initializes a marker options instance that results in a red marker with a Maki icon.
/// \param size The size of the marker.
///
/// \param iconName The name of a <a href="https://www.mapbox.com/maki-icons/">Maki</a> v0.5.0 icon to place atop the pin.
///
- (nonnull instancetype)initWithSize:(enum MBMarkerSize)size iconName:(NSString * _Nonnull)iconName;
/// The path of the HTTP request URL corresponding to the options in this instance.
///
/// returns:
/// An HTTP URL path.
@property (nonatomic, readonly, copy) NSString * _Nonnull path;
/// The query component of the HTTP request URL corresponding to the options in this instance.
///
/// returns:
/// The query URL component as an array of name/value pairs.
@property (nonatomic, readonly, copy) NSArray<NSURLQueryItem *> * _Nonnull params;
@end



/// A polyline or polygon placed along a path atop the map.
SWIFT_CLASS_NAMED("Path")
@interface MBPath : NSObject <MBOverlay>
/// An array of geographic coordinates defining the path of the overlay.
@property (nonatomic, copy) NSArray<NSValue *> * _Nonnull coordinates;
/// The stroke width of the overlay, measured in points.
/// By default, the overlay is 1 point wide.
@property (nonatomic) NSInteger strokeWidth;
/// The stroke color of the overlay.
/// By default, the overlay is stroked with Davy’s gray (33% white).
@property (nonatomic, strong) UIColor * _Nonnull strokeColor;
/// The fill color of the overlay.
/// By default, the overlay is filled with Davy’s gray (33% white).
@property (nonatomic, strong) UIColor * _Nonnull fillColor;
/// Initializes a polyline overlay with the given vertices.
/// The polyline is 1 point wide and stroked with Davy’s gray (33% white).
/// To turn the overlay into a polygon, close the path by ensuring that the first and last coordinates are the same. To fill the polygon, set the <code>fillColor</code> property to a color whose alpha component is greater than 0.0.
/// \param coordinates An array of geographic coordinates defining the path of the overlay.
///
- (nonnull instancetype)initWithCoordinates:(NSArray<NSValue *> * _Nonnull)coordinates OBJC_DESIGNATED_INITIALIZER;
/// Initializes a polyline overlay with the given vertices, stored in a C array.
/// The polyline is 1 point wide and stroked with Davy’s gray (33% white).
/// To turn the overlay into a polygon, close the path by ensuring that the first and last coordinates are the same. To fill the polygon, set the <code>fillColor</code> property to a color whose alpha component is greater than 0.0.
/// note:
/// This initializer is intended for Objective-C usage. In Swift code, use the <code>init(coordinates:)</code> initializer.
/// \param coordinates An array of geographic coordinates defining the path of the overlay.
///
- (nonnull instancetype)initWithCoordinates:(CLLocationCoordinate2D const * _Nonnull)coordinates count:(NSUInteger)count OBJC_DESIGNATED_INITIALIZER;
/// The number of vertices.
/// note:
/// This initializer is intended for Objective-C usage. In Swift code, use the <code>coordinates.count</code> property.
@property (nonatomic, readonly) NSUInteger coordinateCount;
/// Retrieves the vertices.
/// precondition:
/// <code>coordinates</code> must be large enough to hold <code>coordinateCount</code> instances of <code>CLLocationCoordinate2D</code>.
/// note:
/// This initializer is intended for Objective-C usage. In Swift code, use the <code>coordinates</code> property.
/// \param coordinates A pointer to a C array of <code>CLLocationCoordinate2D</code> instances. On output, this array contains all the vertices of the overlay.
///
- (void)getCoordinates:(CLLocationCoordinate2D * _Nonnull)coordinates;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@class UIImage;
@class NSError;
@class NSURLSessionDataTask;

/// A <code>Snapshot</code> instance represents a static snapshot of a map with optional overlays. With a snapshot instance, you can synchronously or asynchronously generate an image based on the options you provide via an HTTP request, or you can get the URL used to make this request. The image is obtained on demand from the <a href="https://www.mapbox.com/api-documentation/#static">Mapbox Static API</a> or the <a href="https://www.mapbox.com/api-documentation/?language=Swift#static-classic">classic Mapbox Static API</a>, depending on whether you use a <code>SnapshotOptions</code> object or a <code>ClassicSnapshotOptions</code> object.
/// The snapshot image can be used in an image view (<code>UIImage</code> on iOS and tvOS, <code>NSImage</code> on macOS, <code>WKImage</code> on watchOS). The image does not respond to user gestures. To add interactivity, use the <a href="https://www.mapbox.com/ios-sdk/">Mapbox iOS SDK</a> or <a href="https://github.com/mapbox/mapbox-gl-native/tree/master/platform/macos/">Mapbox macOS SDK</a>, which can optionally display raster tiles.
SWIFT_CLASS_NAMED("Snapshot")
@interface MBSnapshot : NSObject
/// Options that determine the contents and format of the output image.
@property (nonatomic, readonly, strong) id <MBSnapshotOptionsProtocol> _Nonnull options;
/// Initializes a newly created snapshot instance with the given options and an optional access token and host.
/// \param options Options that determine the contents and format of the output image.
///
/// \param accessToken A Mapbox <a href="https://www.mapbox.com/help/define-access-token/">access token</a>. If an access token is not specified when initializing the snapshot object, it should be specified in the <code>MGLMapboxAccessToken</code> key in the main application bundle’s Info.plist.
///
/// \param host An optional hostname to the server API. The official Mapbox API endpoint is used by default.
///
- (nonnull instancetype)initWithOptions:(id <MBSnapshotOptionsProtocol> _Nonnull)options accessToken:(NSString * _Nullable)accessToken host:(NSString * _Nullable)host OBJC_DESIGNATED_INITIALIZER;
/// Initializes a newly created snapshot instance with the given options and an optional access token.
/// The snapshot instance sends requests to the official Mapbox API endpoint.
/// \param options Options that determine the contents and format of the output image.
///
/// \param accessToken A Mapbox <a href="https://www.mapbox.com/help/define-access-token/">access token</a>. If an access token is not specified when initializing the snapshot object, it should be specified in the <code>MGLMapboxAccessToken</code> key in the main application bundle’s Info.plist.
///
- (nonnull instancetype)initWithOptions:(id <MBSnapshotOptionsProtocol> _Nonnull)options accessToken:(NSString * _Nullable)accessToken;
/// Initializes a newly created snapshot instance with the given options and the default access token.
/// The snapshot instance sends requests to the official Mapbox API endpoint.
/// \param options Options that determine the contents and format of the output image.
///
- (nonnull instancetype)initWithOptions:(id <MBSnapshotOptionsProtocol> _Nonnull)options;
/// The HTTP URL used to fetch the snapshot image from the API.
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
/// Returns an image based on the options in the <code>options</code> property.
/// attention:
/// This property’s getter retrieves the image synchronously over a network connection, blocking the thread on which it is called. If a connection error or server error occurs, the getter returns <code>nil</code>. Consider using the asynchronous <code>image(completionHandler:)</code> method instead to avoid blocking the calling thread and to get more details about any error that may occur.
@property (nonatomic, readonly, strong) UIImage * _Nullable image;
/// Submits the request to create a snapshot image and delivers the results to the given closure.
/// This method retrieves the image asynchronously over a network connection. If a connection error or server error occurs, details about the error are passed into the given completion handler in lieu of an image.
/// On macOS, you may need the same snapshot image at both Retina and non-Retina resolutions to accommodate different displays being connected to the computer. To obtain images at both resolutions, create two different <code>Snapshot</code> instances, each with a different <code>scale</code> option.
/// \param completionHandler The closure (block) to call with the resulting image. This closure is executed on the application’s main thread.
///
///
/// returns:
/// The data task used to perform the HTTP request. If, while waiting for the completion handler to execute, you no longer want the resulting image, cancel this task.
- (NSURLSessionDataTask * _Nonnull)imageWithCompletionHandler:(void (^ _Nonnull)(UIImage * _Nullable, NSError * _Nullable))handler SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// A structure defining the viewpoint from which a snapshot is taken.
SWIFT_CLASS_NAMED("SnapshotCamera")
@interface MBSnapshotCamera : NSObject
/// The geographic coordinate at the center of the snapshot.
/// If the value of this property is <code>nil</code>, the <code>zoomLevel</code> property is ignored and a center coordinate and zoom level are automatically chosen to fit any overlays specified in the <code>overlays</code> property. If the <code>overlays</code> property is also empty, the behavior is undefined.
@property (nonatomic) CLLocationCoordinate2D centerCoordinate;
/// The heading measured in degrees clockwise from true north.
@property (nonatomic) CLLocationDirection heading;
/// The pitch toward the horizon measured in degrees, with 0 degrees resulting in a two-dimensional map.
/// The pitch may not be less than 0 or greater than 60.
@property (nonatomic) CGFloat pitch;
/// Creates and returns a snapshot camera instance based on the given center coordinate and zoom level.
/// This factory method is intended for use in Objective-C. In Swift, use the <code>init(lookingAtCenter:zoomLevel:)</code> initializer instead.
/// \param centerCoordinate The geographic coordinate on which the shapshot should be centered.
///
/// \param zoomLevel The zoom level of the snapshot.
///
///
/// returns:
/// A snapshot camera based on the given center coordinate and zoom level.
+ (nonnull instancetype)cameraLookingAtCenterCoordinate:(CLLocationCoordinate2D)centerCoordinate zoomLevel:(CGFloat)zoomLevel SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// A structure that determines what a snapshot depicts and how it is formatted. A static snapshot is made by compositing a <a href="https://www.mapbox.com/help/define-style/">style</a> with optional overlays using the <a href="https://www.mapbox.com/api-documentation/#static">Mapbox Static API</a>. You can use a <a href="https://www.mapbox.com/api-documentation/#styles">Mapbox-designed style</a> or design your own custom style using <a href="https://www.mapbox.com/studio/">Mapbox Studio</a>. You can only snapshot a style hosted by Mapbox.
/// To generate a static, styled image of a tile set, especially a raster tile set, use a <code>Classic SnapshotOptions</code> object.
/// The Static API always outputs images in true-color Portable Network Graphics (PNG) format. For other image formats, use a <code>ClassicSnapshotOptions</code> object.
SWIFT_CLASS_NAMED("SnapshotOptions")
@interface MBSnapshotOptions : NSObject <MBSnapshotOptionsProtocol>
/// The <a href="https://www.mapbox.com/help/define-style-url/">style URL</a> of the style to snapshot.
/// Only <code>mapbox:</code> URLs are supported. You can only snapshot a style hosted by Mapbox, such as a <a href="https://www.mapbox.com/api-documentation/#styles">Mapbox-designed style</a>.
@property (nonatomic, copy) NSURL * _Nonnull styleURL;
/// An array of overlays to draw atop the map.
/// The order in which the overlays are drawn on the map is undefined.
@property (nonatomic, copy) NSArray<id <MBOverlay>> * _Nonnull overlays;
/// The identifier of the <a href="https://www.mapbox.com/help/define-layer/">style layer</a> below which any overlays should be inserted.
/// This property allows you to insert overlays at any level of the map, not necessarily at the top. For example, if you are adding <code>Path</code> overlays to the snapshot, you may want to place them below any <a href="https://www.mapbox.com/mapbox-gl-js/style-spec/#layer-type">symbol layers</a> to ensure that street and point of interest labels remain legible.
/// If this property is set to <code>nil</code>, any overlays are placed atop any layers defined by the style. By default, this property is set to <code>nil</code>.
/// Layer identifiers are not guaranteed to exist across styles or different versions of the same style. To find out the layer identifiers in a particular style, view the style in <a href="https://www.mapbox.com/studio/">Mapbox Studio</a>.
@property (nonatomic, copy) NSString * _Nullable identifierOfLayerAboveOverlays;
/// The viewpoint from which the snapshot is taken.
/// If the value of this property is <code>nil</code>, a center coordinate and zoom level are automatically chosen to fit any overlays specified in the <code>overlays</code> property, and no heading or pitch is applied. If the <code>overlays</code> property is also empty, the behavior is undefined.
/// The default value of this property is <code>nil</code>.
@property (nonatomic, strong) MBSnapshotCamera * _Nullable camera;
/// The logical size of the image to output, measured in points.
/// The width may not be less than 1 point or greater than 1,280 points. Likewise, the height may not be less than 1 point or greater than 1,280 points.
@property (nonatomic) CGSize size;
/// The scale factor of the image.
/// If you multiply the logical size of the image (stored in the <code>size</code> property) by the value in this property, you get the dimensions of the image in pixels.
/// The default value of this property matches the natural scale factor associated with the main screen. However, only images with a scale factor of 1.0 or 2.0 are ever returned by the Static API, so a scale factor of 1.0 of less results in a 1× (standard-resolution) image, while a scale factor greater than 1.0 results in a 2× (high-resolution or Retina) image.
@property (nonatomic) CGFloat scale;
/// A Boolean determining whether the resulting image includes the Mapbox logo.
/// When shown, the Mapbox logo is located in the lower-left corner of the image. By default, this property is set to <code>true</code>.
/// note:
/// The Mapbox terms of service <a href="https://www.mapbox.com/help/attribution/">requires</a> the <a href="https://www.mapbox.com/about/press/brand-guidelines/">Mapbox logo</a> to accompany the snapshot. In general, you should not set this property to <code>false</code>. Contact your Mapbox sales representative for information about waiving this requirement. This requirement is distinct from the requirement that governs the <code>showsAttribution</code> property.
@property (nonatomic) BOOL showsLogo;
/// A Boolean determining whether the resulting image includes legally required copyright notices.
/// When shown, the attribution is located in the bottom-right corner of the image. By default, this property is set to <code>true</code>.
/// note:
/// The Mapbox terms of service, which governs the use of Mapbox-hosted vector tiles and styles, <a href="https://www.mapbox.com/help/attribution/">requires</a> these copyright notices to accompany any map that features Mapbox-designed styles, OpenStreetMap data, or other Mapbox data such as satellite or terrain data. If this requirement applies to the shapshot and you set this property to <code>false</code>, you must provide <a href="https://www.mapbox.com/help/attribution/#static--print">proper attribution</a> near the snapshot. This requirement is distinct from the requirement that governs the <code>showsLogo</code> property.
@property (nonatomic) BOOL showsAttribution;
/// Initializes a snapshot options instance that causes a snapshotter object to automatically choose a center coordinate and zoom level that fits any overlays.
/// After initializing a snapshot options instance with this initializer, set the <code>overlays</code> property to specify the overlays to fit the snapshot to.
/// \param styleURL The <a href="https://www.mapbox.com/help/define-style-url/">style URL</a> of the style to snapshot. Only <code>mapbox:</code> URLs are supported. You can only snapshot a style hosted by Mapbox, such as a <a href="https://www.mapbox.com/api-documentation/#styles">Mapbox-designed style</a>.
///
/// \param size The logical size of the image to output, measured in points.
///
- (nonnull instancetype)initWithStyleURL:(NSURL * _Nonnull)styleURL size:(CGSize)size OBJC_DESIGNATED_INITIALIZER;
/// Initializes a snapshot options instance that results in a snapshot centered at the given geographical coordinate and showing the given zoom level.
/// \param styleURL The <a href="https://www.mapbox.com/help/define-style-url/">style URL</a> of the style to snapshot. Only <code>mapbox:</code> URLs are supported. You can only snapshot a style hosted by Mapbox, such as a <a href="https://www.mapbox.com/api-documentation/#styles">Mapbox-designed style</a>.
///
/// \param camera The viewpoint from which the snapshot is taken.
///
/// \param size The logical size of the image to output, measured in points.
///
- (nonnull instancetype)initWithStyleURL:(NSURL * _Nonnull)styleURL camera:(MBSnapshotCamera * _Nonnull)camera size:(CGSize)size OBJC_DESIGNATED_INITIALIZER;
/// The path of the HTTP request URL corresponding to the options in this instance.
///
/// returns:
/// An HTTP URL path.
@property (nonatomic, readonly, copy) NSString * _Nonnull path;
/// The query component of the HTTP request URL corresponding to the options in this instance.
///
/// returns:
/// The query URL component as an array of name/value pairs.
@property (nonatomic, readonly, copy) NSArray<NSURLQueryItem *> * _Nonnull params;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end



@interface UIColor (SWIFT_EXTENSION(MapboxStatic))
@end

#pragma clang diagnostic pop
